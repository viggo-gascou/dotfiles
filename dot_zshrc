# -- DESCRIPTION --------------------------------------------------------------

# -*-mode:sh-*- vim:ft=shell-script

# ~/.zshrc
# =============================================================================
# Executed by Z shell for interactive shells.
#
# See http://zsh.sourceforge.net/Intro/intro_3.html

# -- INIT ---------------------------------------------------------------------

if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# -- ZINIT --------------------------------------------------------------------

# MOVE ZSH_HISTORY
HISTFILE="${HOME}/.cache/zsh/.zsh_history"

# Make alt jumping through words treat $WORDCHARS as word delimiters i.e., the bash default 
autoload -U select-word-style
select-word-style bash

# MOVE ZCOMPDUMP AND SPEED UP LOADING
# FROM ZINIT README
# see zshcompsys(1) 'man zshcompsys' for meaning of '-C' option
declare -A ZINIT
ZINIT[ZCOMPDUMP_PATH]="${HOME}/.cache/zsh/.zcompdump-$ZSH_VERSION"
ZINIT[COMPINIT_OPTS]="-C"

# MOVE ZCOMPCACHE
zstyle ':completion::complete:*' cache-path "${HOME}/.cache/zsh/.zcompcache"

### Added by Zinit's installer
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})â€¦%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust
### End of Zinit's installer chunk

# -- SNIPPETS -----------------------------------------------------------------

local local GH_RAW_URL='https://raw.githubusercontent.com'
install_git_completion(){ zinit for as'completion' nocompile id-as"$1" is-snippet "$GH_RAW_URL/$2"; }
install_local_completion() { zinit for as'completion' nocompile id-as"$1" is-snippet "$2"}
install_git_completion 'fd-completion/_fd'         'sharkdp/fd/master/contrib/completion/_fd'
install_local_completion 'lsd-completion/_lsd'     '${XDG_DATA_HOME:-$HOME/.local/share}/zinit/plugins/Peltoche---lsd/lsd/autocomplete/_lsd'

# -- PLUGINS ------------------------------------------------------------------

zinit ice depth=1
zinit light romkatv/powerlevel10k
zinit light zsh-users/zsh-history-substring-search

zinit pick"misc/quitcd/quitcd.zsh" sbin make"O_NERD=1" light-mode for jarun/nnn

zinit wait lucid from"gh-r" as"null" for \
  sbin"fzf"          junegunn/fzf \
  sbin"**/fd"        @sharkdp/fd \
  sbin"**/bat"       @sharkdp/bat \
  mv"lsd* -> lsd" \
  sbin"**/lsd"       Peltoche/lsd \

zinit wait lucid light-mode for \
  wfxr/forgit \
  atload"_zsh_autosuggest_start" \
      zsh-users/zsh-autosuggestions \
  blockf atpull'zinit creinstall -q .' \
      zsh-users/zsh-completions \
      conda-incubator/conda-zsh-completion \
  atinit"zicompinit; zicdreplay" \
      zdharma-continuum/fast-syntax-highlighting \

# -- NNN SETTINGS -------------------------------------------------------------

BLK="0B" CHR="0B" DIR="04" EXE="06" REG="00" HARDLINK="06" SYMLINK="06" MISSING="00" ORPHAN="09" FIFO="06" SOCK="0B" OTHER="06"
export NNN_FCOLORS="$BLK$CHR$DIR$EXE$REG$HARDLINK$SYMLINK$MISSING$ORPHAN$FIFO$SOCK$OTHER"
export NNN_PLUG="p:preview-tui-cust;o:fzopen;c:fzcd;l:getplugs;"
export NNN_FIFO="/tmp/nnn.fifo"
n ()
{
    # Block nesting of nnn in subshells
    if [[ "${NNNLVL:-0}" -ge 1 ]]; then
        echo "nnn is already running"
        return
    fi

    # The behaviour is set to cd on quit (nnn checks if NNN_TMPFILE is set)
    # If NNN_TMPFILE is set to a custom path, it must be exported for nnn to
    # see. To cd on quit only on ^G, remove the "export" and make sure not to
    # use a custom path, i.e. set NNN_TMPFILE *exactly* as follows:
    #     NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
    export NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"

    # Unmask ^Q (, ^V etc.) (if required, see `stty -a`) to Quit nnn
    # stty start undef
    # stty stop undef
    # stty lwrap undef
    # stty lnext undef

    # The backslash allows one to alias n to nnn if desired without making an
    # infinitely recursive alias
    \nnn "$@"

    if [ -f "$NNN_TMPFILE" ]; then
            . "$NNN_TMPFILE"
            rm -f "$NNN_TMPFILE" > /dev/null
    fi
}

# -- SETINGS ------------------------------------------------------------------

# History file settings
HISTSIZE=50000
SAVEHIST=10000
setopt hist_expire_dups_first
setopt hist_ignore_dups
setopt hist_ignore_space
setopt hist_verify
setopt sharehistory

# Make the substring search only match if command starts with the same substring
# Usage from: https://bit.ly/zsh-substring-hist-conf
typeset -g HISTORY_SUBSTRING_SEARCH_PREFIXED='i'

# Make sure path and fpath do not contain duplicate entries
typeset -U fpath
typeset -U path

# Create LS_COLORS colorscheme from vivid colorscheme generator
export LS_COLORS="$(vivid generate ~/.config/vivid/themes/nord.yml)"

# Make the <tab> completion have the same colorscheme as $LS_COLORS and enable arrow-keys to move around
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' menu select

# Complete . and .. special directories
zstyle ':completion:*' special-dirs true

# Make <tab> completion case insensitive
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|=*' 'l:|=* r:|=*'

# -- PATH ---------------------------------------------------------------------

export PATH=$PATH:~/.local/bin

# -- SYSTEM ENV ---------------------------------------------------------------

export EDITOR='lvim'
export VISUAL='$EDITOR'

export LANG="en_US.UTF-8"
export LC_CTYPE="en_US.UTF-8"
export COLORTERM="truecolor"

export XDG_CONFIG_HOME="$HOME/.config"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_CACHE_HOME="$HOME/.cache"

export NVM_DIR="$HOME/.config/nvm"
# See https://github.com/nvm-sh/nvm/issues/1978
function _install_nvm() {
  unset -f nvm npm node
  # Set up "nvm" could use "--no-use" to defer setup, but this is still kinda slow
  [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" # This loads nvm
  [ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
  "$@"
}

function nvm() {
    _install_nvm nvm "$@"
}

function npm() {
    _install_nvm npm "$@"
}

function node() {
    _install_nvm node "$@"
}

# -- ALIASES ------------------------------------------------------------------

# CONFIG ALIASES

alias zshconfig='chezmoi edit ~/.zshrc'
alias lunarconfig='chezmoi edit ~/.config/lvim/config.lua'
alias kittyconfig='chezmoi edit ~/.config/kitty/kitty.conf'

# KITTY SPECIFIC ALIASES

alias icat='kitty +kitten icat'
alias diff='kitty +kitten diff'
alias kittytheme='kitty +kitten themes'
alias kittyupdate='~/bin_scripts/kitty_update.sh'

# BIN SCRIPT ALIASES

alias killicloud='~/bin_scripts/kill_icloud_drive.sh'
alias replace_icon='~/bin_scripts/change_icon.sh'
alias print_colors='~/bin_scripts/print_colors.sh'
alias print_256='~/bin_scripts/print_colors_256.sh'
alias remove_yaml='~/bin_scripts/yaml_remove.sh'

chezmoi-cd() {
  cd $(chezmoi source-path)
}

alias cm-cd='chezmoi-cd'

# PROGRAMS

disable r
alias r='radian'
alias ls='lsd'
alias py='python'
alias ipy='ipython'
alias gp='git push'
alias cm='chezmoi'
alias man='batman'

# NAVIGATION
# For enabling 'cd ...' etc. to jump up multiple levels - taken from OMZ/lib/directories.zsh script

alias -g ...='../..'
alias -g ....='../../..'
alias -g .....='../../../..'
alias -g ......='../../../../..'


# -- CONDA --------------------------------------------------------------------

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/Users/viggogascou/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/Users/viggogascou/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/Users/viggogascou/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/Users/viggogascou/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

conda activate py310

# -- KEYBINDINGS --------------------------------------------------------------

bindkey '^[[A'     history-substring-search-up
bindkey '^[[B'     history-substring-search-down

bindkey '^[[Z' autosuggest-accept  # shift + tab  | autosuggest

# -- FINAL --------------------------------------------------------------------

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

